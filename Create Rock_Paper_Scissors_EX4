package rockpaperscissors;
import java.io.FileNotFoundException;
import java.util.Scanner;
import java.util.Random;
import java.io.File;


/*
A good ex. I learned that you should not add the file extension in the file name.
 */

public class Main {
    boolean running = true;

    final String PAPER = "paper", ROCK = "rock", SCISSORS = "scissors", EXIT = "!exit", RATING = "!rating";
    final int PLAYED_PAPER = 1, PLAYED_ROCK = 2, PLAYED_SCISSORS = 3, PLAYED_EXIT = 4,PLAYED_DISPLAY_RATING = 5;
    final int DRAW = 3, PLAYER_WINS = 1, COMPUTER_WINS = 2, DISPLAY_RATING = 5, DISPLAY_EXIT = 4;
    public int playerThrew = 0, computerThrew = 0, winScenario = 0;
    final String RATING_FILE_PATH=".\\rating.txt";
    public String computerChosenSignString = " ";

    public String player;
    public int playerScore;

    public void displayProjectPath(){
        String myProjectPath=System.getProperty("user.dir");
        System.out.println("Project path: "+  myProjectPath);

    }           // used to debug file name issues

    public String createPlayer() {
        Scanner scanner= new Scanner(System.in);
        System.out.print("Enter your name: ");
        String player = scanner.nextLine();
        System.out.printf("Hello, %s%n",player);
        return player;
    }

    public boolean checkInputFile(File ratingFile) {     // ended up not  using this method

        boolean fileOK = true;

        if(!ratingFile.exists()) {
            System.out.print("the input file does not exist! \n");
                fileOK = false;
        }else if(!ratingFile.canRead()) {
                fileOK = false;
            System.out.print("the input file cannot be read! \n");
                fileOK = false;
        }else if(!ratingFile.isFile()) {
            fileOK = false;
            System.out.print("the input is not a file! \n");
        } else {
            fileOK=true;
        }
            System.out.print(fileOK);
            return fileOK;
    }


    public void importExternalRating(){
        File ratingFile = new File (RATING_FILE_PATH);
//            System.out.println("Rating file path: " + ratingFile.getAbsolutePath());          // used to trouble shoot
        Scanner readInFile;
        String  readLine;

        player = createPlayer();

        try{

            readInFile = new Scanner(ratingFile);

            while(readInFile.hasNextLine()) {

                readLine = readInFile.nextLine();

                String[] components = readLine.split(" ");          // I have not created an

                if(components[0].equalsIgnoreCase(player)) {                 // should set to throw an exception?

                    playerScore=Integer.parseInt(components[1]);

                }

            }

            readInFile.close();

        }catch (FileNotFoundException e) {

            throw new RuntimeException();

        }


    }

    public void getPlayerMove() {

        Scanner scanner = new Scanner(System.in);
        String playerMove = scanner.next();                 // can not close the playerMove scanner, reason not known for now

        if (playerMove.equalsIgnoreCase(PAPER)) {
            playerThrew = PLAYED_PAPER;
        } else if (playerMove.equalsIgnoreCase(ROCK)) {
            playerThrew = PLAYED_ROCK;
        } else if (playerMove.equalsIgnoreCase(SCISSORS)) {
            playerThrew = PLAYED_SCISSORS;
        } else if (playerMove.equalsIgnoreCase(EXIT)) {
            running = false;
            playerThrew = PLAYED_EXIT;
        }else if (playerMove.equalsIgnoreCase(RATING)) {
            playerThrew = PLAYED_DISPLAY_RATING;
        } else {
            System.out.print("Invalid input\n");
            getPlayerMove();
        }
                                                            // removed close playerMove.close();
    }

    public void getComputerMove() {

        Random generateComputerMove = new Random();

        computerThrew = generateComputerMove.nextInt(3) + 1;

        if (computerThrew == PLAYED_SCISSORS) {
            computerChosenSignString = SCISSORS;
        } else if (computerThrew == PLAYED_ROCK) {
            computerChosenSignString = ROCK;
        } else if (computerThrew == PLAYED_PAPER) {
            computerChosenSignString = PAPER;
        } else {
            System.out.print("The computer chose an invalid sign");
        }

    }
    public void evaluateWin() {

        if (playerThrew == computerThrew) {
            winScenario = DRAW;
            playerScore = playerScore + 50;
        } else if (playerThrew == PLAYED_PAPER && computerThrew == PLAYED_ROCK) {
            winScenario = PLAYER_WINS;
            playerScore = playerScore + 100;
        } else if (playerThrew == PLAYED_SCISSORS && computerThrew == PLAYED_PAPER) {
            winScenario = PLAYER_WINS;
            playerScore = playerScore + 100;
        } else if (playerThrew == PLAYED_ROCK && computerThrew == PLAYED_SCISSORS) {
            winScenario = PLAYER_WINS;
            playerScore = playerScore + 100;
        } else if (playerThrew == PLAYED_EXIT) {
            winScenario = PLAYED_EXIT;
        }else if (playerThrew == PLAYED_DISPLAY_RATING) {
            winScenario = PLAYED_DISPLAY_RATING;
        }else {
            winScenario = COMPUTER_WINS;
            playerScore = playerScore + 0;                // for ease of reading.
        }

    }

    public void displayResult() {

        switch (winScenario) {
            case DRAW:
                System.out.printf("There is a draw (%s)%n", computerChosenSignString);
                return;
            case PLAYER_WINS:
                System.out.printf("Well done. The computer chose %s and failed %n", computerChosenSignString);
                return;
            case COMPUTER_WINS:
                System.out.printf("Sorry, but the computer chose %s %n", computerChosenSignString);
                return;
            case DISPLAY_EXIT:
                System.out.print("Bye!");
                return;
            case DISPLAY_RATING:
                System.out.printf("Your rating: %d%n", playerScore);
                return;
            default:
                return;
        }

    }

    public static void main(String[] args) {
        Main game = new Main();


        game.importExternalRating();

        while (game.running) {

            game.getPlayerMove();
            game.getComputerMove();
            game.evaluateWin();
            game.displayResult();
        }


    }
}
