package rockpaperscissors;

import java.io.FileNotFoundException;
import java.util.Scanner;
import java.util.Random;
import java.io.File;
/*

*/

public class Main {
    boolean running = true;
    boolean extendedGame = false;
    boolean initialRun = true;
    final String PAPER = "paper", ROCK = "rock", SCISSORS = "scissors", EXIT = "!exit", RATING = "!rating";
    final int PLAYED_PAPER = 1, PLAYED_ROCK = 2, PLAYED_SCISSORS = 3, PLAYED_EXIT = 4, PLAYED_DISPLAY_RATING = 5;
    final int DRAW = 3, PLAYER_WINS = 1, COMPUTER_WINS = 2, DISPLAY_RATING = 5, DISPLAY_EXIT = 4;
    public int playerThrew, computerThrew = 0, winScenario = 0;
    final String RATING_FILE_PATH = ".\\rating.txt";
    public String computerChosenSignString = " ";
    public String playerThrewExtended = "0";
    public String player = createPlayer();
    public String[] extendedGameComponents = getExtendedGameDeck();         // hoping this is acceptable
    public int playerScore;
    private Random generateComputerMove;

    public String createPlayer() {
        System.out.print("Enter your name: ");
        Scanner scanner = new Scanner(System.in);
        player = scanner.nextLine();
        System.out.printf("Hello, %s%n", player);
        return player;

    }

    public String[] getExtendedGameDeck() {
        Scanner scanner = new Scanner(System.in);
        String[] components = scanner.nextLine().split(",");
        if (components[0].equalsIgnoreCase("")) {
            extendedGame = false;
        } else {
            extendedGame = true;
        }

        return components;

    }

    public void importExternalRating() {
        File ratingFile = new File(RATING_FILE_PATH);
//      System.out.println("Rating file path: " + ratingFile.getAbsolutePath());          // used to trouble shoot
        Scanner readInFile;
        String readLine;

        try {

            readInFile = new Scanner(ratingFile);

            while (readInFile.hasNextLine()) {

                readLine = readInFile.nextLine();

                String[] components = readLine.split(" ");          // I have not created an

                if (components[0].equalsIgnoreCase(player)) {                 // should set to throw an exception?

                    playerScore = Integer.parseInt(components[1]);

                }

            }

            readInFile.close();

        } catch (FileNotFoundException e) {

            throw new RuntimeException();

        }

    }

    public void getPlayerMove() {

        if (initialRun) {
            System.out.print("Okay, let's start \n");
        }
        initialRun = false;

        Scanner getMove = new Scanner(System.in);
        String playerMove = getMove.next();

        if (playerMove.equalsIgnoreCase(PAPER)) {
            playerThrew = PLAYED_PAPER;
        } else if (playerMove.equalsIgnoreCase(ROCK)) {
            playerThrew = PLAYED_ROCK;
        } else if (playerMove.equalsIgnoreCase(SCISSORS)) {
            playerThrew = PLAYED_SCISSORS;
        } else if (playerMove.equalsIgnoreCase(EXIT)) {
            running = false;
            playerThrew = PLAYED_EXIT;
        } else if (playerMove.equalsIgnoreCase(RATING)) {
            playerThrew = PLAYED_DISPLAY_RATING;
        } else {
            System.out.print("Invalid input\n");
            getPlayerMove();
        }
    }

    public void extendedPlayerMove() {

        if (initialRun) {
            System.out.print("Okay, let's start \n");
        }
        initialRun = false;

        Scanner getMove = new Scanner(System.in);
        String playerMove = getMove.next();

        String[] playableOptions = extendedGameComponents;
        int deckSize = playableOptions.length;
        int checkValue = 0;

        if (playerMove.equalsIgnoreCase(EXIT)) {
            running = false;
            playerThrewExtended = "!exit";
            winScenario = DISPLAY_EXIT;
            return;
        }
        if (playerMove.equalsIgnoreCase(RATING)) {
            winScenario = DISPLAY_RATING;
            playerThrewExtended = "!rating";
            return;
        }

        for (int i = 0; i < deckSize; i++) {
            if (playerMove.equalsIgnoreCase(playableOptions[i])) {
                playerThrewExtended = playableOptions[i];
                playerThrew = i;
                return;
            } else {
                checkValue++;
            }
        }

        if (checkValue == deckSize) {
            System.out.print("Invalid input\n");
            extendedPlayerMove();
        }

    }

    public void extendedComputerMove() {

        Random generateComputerMove = new Random();
        String[] playableOptions = extendedGameComponents;
        int deckSize = playableOptions.length - 1;
        computerThrew = generateComputerMove.nextInt(deckSize) + 1;
        computerChosenSignString = playableOptions[computerThrew];

    }

    public void extendedEvaluateWin() {

        String[] playableOptions = extendedGameComponents;
        int deckSize = playableOptions.length;
        String[] winLineUp = new String[deckSize];
        String valueBuffer = playableOptions[0];

        for (int i = 0; i < deckSize - 1; i++) {
            winLineUp[i] = playableOptions[(i + playerThrew) % deckSize];
        }
        winLineUp[deckSize - 1] = valueBuffer;

        String[] thrownCut = new String[winLineUp.length - 1];
        System.arraycopy(winLineUp, 1, thrownCut, 0, thrownCut.length);

        if (playerThrewExtended.equalsIgnoreCase(computerChosenSignString)) {
            winScenario = DRAW;
            playerScore = playerScore + 50;
        } else if (playerThrewExtended.equalsIgnoreCase("!exit")) {
            return;
        } else if (playerThrewExtended.equalsIgnoreCase("!rating")) {
            return;

        } else {
            int thrownCutHalf = thrownCut.length / 2;

            for (int i = 0; i <= thrownCutHalf - 1; i++) {
                if (thrownCut[i].equalsIgnoreCase(computerChosenSignString)) {
                    winScenario = COMPUTER_WINS;
                    playerScore = playerScore + 0;
                }
            }


            for (int i = thrownCutHalf; i <= thrownCut.length - 1; i++) {
                if (thrownCut[i].equalsIgnoreCase(computerChosenSignString)) {
                    winScenario = PLAYER_WINS;
                    playerScore = playerScore + 100;
                }

            }
        }
    }

    public void getComputerMove() {

        Random generateComputerMove = new Random();

        computerThrew = generateComputerMove.nextInt(3) + 1;

        if (computerThrew == PLAYED_SCISSORS) {
            computerChosenSignString = SCISSORS;
        } else if (computerThrew == PLAYED_ROCK) {
            computerChosenSignString = ROCK;
        } else if (computerThrew == PLAYED_PAPER) {
            computerChosenSignString = PAPER;
        } else {
            System.out.print("The computer chose an invalid sign");
        }

    }

    public void evaluateWin() {

        if (playerThrew == computerThrew) {
            winScenario = DRAW;
            playerScore = playerScore + 50;
        } else if (playerThrew == PLAYED_PAPER && computerThrew == PLAYED_ROCK) {
            winScenario = PLAYER_WINS;
            playerScore = playerScore + 100;
        } else if (playerThrew == PLAYED_SCISSORS && computerThrew == PLAYED_PAPER) {
            winScenario = PLAYER_WINS;
            playerScore = playerScore + 100;
        } else if (playerThrew == PLAYED_ROCK && computerThrew == PLAYED_SCISSORS) {
            winScenario = PLAYER_WINS;
            playerScore = playerScore + 100;
        } else if (playerThrew == PLAYED_EXIT) {
            winScenario = PLAYED_EXIT;
        } else if (playerThrew == PLAYED_DISPLAY_RATING) {
            winScenario = PLAYED_DISPLAY_RATING;
        } else {
            winScenario = COMPUTER_WINS;
            playerScore = playerScore + 0;
        }

    }

    public void displayResult() {

        switch (winScenario) {
            case DRAW:
                System.out.printf("There is a draw (%s)%n", computerChosenSignString);
                return;
            case PLAYER_WINS:
                System.out.printf("Well done. The computer chose %s and failed %n", computerChosenSignString);
                return;
            case COMPUTER_WINS:
                System.out.printf("Sorry, but the computer chose %s %n", computerChosenSignString);
                return;
            case DISPLAY_EXIT:
                System.out.print("Bye!");
                return;
            case DISPLAY_RATING:
                System.out.printf("Your rating: %d%n", playerScore);
                return;
            default:
                return;
        }

    }

    public static void main(String[] args) {
        Main game = new Main();

        game.importExternalRating();

        while (game.running && !game.extendedGame) {
            game.getPlayerMove();
            game.getComputerMove();
            game.evaluateWin();
            game.displayResult();
        }

        while (game.running && game.extendedGame) {

            game.extendedPlayerMove();
            game.extendedComputerMove();
            game.extendedEvaluateWin();
            game.displayResult();

        }

    }
}
